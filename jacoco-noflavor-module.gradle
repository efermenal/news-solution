apply from: "$project.rootDir/jacoco.gradle"

sonarqube {
    androidVariant 'debug'
    properties {
        property "sonar.jacoco.reportPaths", "**/jacoco/*.exec"
        property "sonar.java.binaries", "build/intermediates/classes/debug"
        property "sonar.java.test.binaries", "build/intermediates/classes/test/debug"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
    }
}

project.tasks["sonarqube"].dependsOn "testDebugUnitTest"

project.afterEvaluate {
    testDebugUnitTestCoverage.doLast {
        def report = file("${jacoco.reportsDir}/testDebugUnitTestCoverage/testDebugUnitTestCoverage.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]

    /*
        def failures = []
        def canIncrease = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
            if (it.value > limit + 1) {
                canIncrease.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }


        def log = printResult(logger, failures, "Code Coverage Failed")
        log += printResult(logger, canIncrease, "Code Coverage Status!")
        logger.log(LogLevel.INFO, log)
        */
        // use this here again if we really want to fail on our limits
//        if (failures) {
//            throw new GradleException(log)
//        }
    }
}